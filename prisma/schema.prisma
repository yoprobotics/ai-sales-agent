// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  role              UserRole  @default(CLIENT)
  plan              SubscriptionPlan @default(STARTER)
  companyName       String?   @map("company_name")
  dataRegion        DataRegion @default(EU) @map("data_region")
  isEmailVerified   Boolean   @default(false) @map("is_email_verified")
  language          Language  @default(en)
  timezone          String    @default("UTC")
  avatar            String?
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  icps              ICP[]
  prospects         Prospect[]
  emailSequences    EmailSequence[]
  campaigns         Campaign[]
  messages          Message[]
  activities        Activity[]
  aiInsights        AIInsight[]
  reports           Report[]
  subscription      Subscription?
  sessions          Session[]
  passwordResets    PasswordReset[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// ICP (Ideal Customer Profile)
model ICP {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String
  description String?
  criteria    Json      // ICPCriteria object
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospects      Prospect[]
  emailSequences EmailSequence[]

  @@map("icps")
}

// Prospects and Companies
model Prospect {
  id                String         @id @default(cuid())
  userId            String         @map("user_id")
  icpId             String         @map("icp_id")
  email             String
  firstName         String?        @map("first_name")
  lastName          String?        @map("last_name")
  jobTitle          String?        @map("job_title")
  company           Json           // ProspectCompany object
  linkedinUrl       String?        @map("linkedin_url")
  websiteUrl        String?        @map("website_url")
  phone             String?
  notes             String?
  score             Float          @default(0)
  scoreExplanation  Json?          @map("score_explanation") // ScoreExplanation object
  stage             ProspectStage  @default(NEW)
  source            ProspectSource @default(MANUAL)
  lastContactedAt   DateTime?      @map("last_contacted_at")
  nextFollowUpAt    DateTime?      @map("next_follow_up_at")
  isOptedOut        Boolean        @default(false) @map("is_opted_out")
  customFields      Json           @default("{}") @map("custom_fields")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  icp        ICP         @relation(fields: [icpId], references: [id], onDelete: Cascade)
  messages   Message[]
  activities Activity[]

  @@unique([userId, email])
  @@map("prospects")
}

// Email Sequences
model EmailSequence {
  id          String               @id @default(cuid())
  userId      String               @map("user_id")
  icpId       String               @map("icp_id")
  name        String
  description String?
  isActive    Boolean              @default(true) @map("is_active")
  stats       Json                 @default("{}") // SequenceStats object
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  // Relations
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  icp       ICP                  @relation(fields: [icpId], references: [id], onDelete: Cascade)
  steps     EmailSequenceStep[]
  campaigns Campaign[]

  @@map("email_sequences")
}

model EmailSequenceStep {
  id         String    @id @default(cuid())
  sequenceId String    @map("sequence_id")
  stepNumber Int       @map("step_number")
  subject    String
  content    String
  delayDays  Int       @map("delay_days")
  conditions Json      @default("[]") // SequenceCondition[]
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  sequence EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([sequenceId, stepNumber])
  @@map("email_sequence_steps")
}

// Campaigns
model Campaign {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  name        String
  description String?
  sequenceId  String         @map("sequence_id")
  prospects   String[]       // Array of prospect IDs
  status      CampaignStatus @default(DRAFT)
  startedAt   DateTime?      @map("started_at")
  completedAt DateTime?      @map("completed_at")
  stats       Json           @default("{}") // SequenceStats object
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequence EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("campaigns")
}

// Messages
model Message {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  prospectId       String        @map("prospect_id")
  campaignId       String?       @map("campaign_id")
  sequenceStepId   String?       @map("sequence_step_id")
  type             MessageType   @default(MANUAL)
  channel          MessageChannel @default(EMAIL)
  subject          String?
  content          String
  status           MessageStatus @default(DRAFT)
  sentAt           DateTime?     @map("sent_at")
  deliveredAt      DateTime?     @map("delivered_at")
  openedAt         DateTime?     @map("opened_at")
  clickedAt        DateTime?     @map("clicked_at")
  repliedAt        DateTime?     @map("replied_at")
  metadata         Json          @default("{}")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospect     Prospect           @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  campaign     Campaign?          @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  sequenceStep EmailSequenceStep? @relation(fields: [sequenceStepId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// Activities
model Activity {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  prospectId  String            @map("prospect_id")
  type        ActivityType
  title       String
  description String?
  scheduledAt DateTime?         @map("scheduled_at")
  completedAt DateTime?         @map("completed_at")
  reminder    Json?             // ActivityReminder object
  metadata    Json              @default("{}")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospect Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// AI Insights
model AIInsight {
  id          String          @id @default(cuid())
  userId      String          @map("user_id")
  type        InsightType
  title       String
  description String
  priority    InsightPriority @default(MEDIUM)
  actionable  Boolean         @default(true)
  metadata    Json            @default("{}")
  isRead      Boolean         @default(false) @map("is_read")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_insights")
}

// Reports
model Report {
  id          String     @id @default(cuid())
  userId      String     @map("user_id")
  type        ReportType
  name        String
  data        Json
  generatedAt DateTime   @default(now()) @map("generated_at")
  expiresAt   DateTime?  @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Subscriptions
model Subscription {
  id                    String             @id @default(cuid())
  userId                String             @unique @map("user_id")
  plan                  SubscriptionPlan
  status                SubscriptionStatus
  stripeCustomerId      String             @unique @map("stripe_customer_id")
  stripeSubscriptionId  String             @unique @map("stripe_subscription_id")
  currentPeriodStart    DateTime           @map("current_period_start")
  currentPeriodEnd      DateTime           @map("current_period_end")
  cancelAtPeriodEnd     Boolean            @default(false) @map("cancel_at_period_end")
  usage                 Json               @default("{}") // SubscriptionUsage object
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Events and Audit Logs
model Event {
  id        String    @id @default(cuid())
  userId    String?   @map("user_id")
  type      String
  data      Json
  ip        String?
  userAgent String?   @map("user_agent")
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("events")
}

// Enums
enum UserRole {
  CLIENT
  ADMIN
  TEAM_MEMBER
  TEAM_OWNER
}

enum Language {
  en
  fr
}

enum DataRegion {
  US
  EU
  CA
}

enum SubscriptionPlan {
  STARTER
  PRO
  BUSINESS
}

enum SubscriptionStatus {
  active
  canceled
  past_due
  unpaid
  incomplete
}

enum CompanySize {
  startup
  small
  medium
  large
  enterprise
}

enum RevenueRange {
  under_1m
  @map("1m_10m") ONE_TO_TEN_M
  @map("10m_50m") TEN_TO_FIFTY_M
  @map("50m_100m") FIFTY_TO_HUNDRED_M
  over_100m
}

enum ProspectStage {
  new
  contacted
  meeting
  negotiation
  won
  lost
}

enum ProspectSource {
  csv_import
  url_scraping
  manual
  api
  integration
}

enum CampaignStatus {
  draft
  active
  paused
  completed
  archived
}

enum MessageType {
  initial
  follow_up
  manual
  template
}

enum MessageChannel {
  email
  linkedin
  sms
  whatsapp
}

enum MessageStatus {
  draft
  scheduled
  sent
  delivered
  opened
  clicked
  replied
  bounced
  failed
}

enum ActivityType {
  call
  meeting
  email
  note
  task
  demo
  follow_up
}

enum InsightType {
  performance
  recommendation
  alert
  trend
  prediction
}

enum InsightPriority {
  low
  medium
  high
  urgent
}

enum ReportType {
  performance
  prospects
  sequences
  campaigns
  revenue
}
