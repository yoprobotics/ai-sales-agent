// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER MANAGEMENT ====================

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  passwordHash     String
  firstName        String
  lastName         String
  companyName      String?
  role             UserRole         @default(CLIENT)
  plan             SubscriptionPlan @default(STARTER)
  dataRegion       DataRegion       @default(EU)
  language         Language         @default(en)
  timezone         String           @default("UTC")
  isEmailVerified  Boolean          @default(false)
  emailVerifiedAt  DateTime?
  lastLoginAt      DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  icps          ICP[]
  prospects     Prospect[]
  sequences     EmailSequence[]
  campaigns     Campaign[]
  messages      Message[]
  activities    Activity[]
  insights      AIInsight[]
  reports       Report[]
  subscription  Subscription?
  sessions      Session[]
  auditLogs     AuditLog[]
  notifications Notification[]

  @@index([email])
  @@index([role])
  @@index([plan])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// ==================== IDEAL CUSTOMER PROFILE ====================

model ICP {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // JSON field for flexible criteria
  criteria Json

  // Relations
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospects  Prospect[]
  sequences  EmailSequence[]

  @@index([userId])
  @@index([isActive])
}

// ==================== PROSPECTS ====================

model Prospect {
  id              String        @id @default(cuid())
  userId          String
  icpId           String
  email           String
  firstName       String?
  lastName        String?
  jobTitle        String?
  linkedinUrl     String?
  websiteUrl      String?
  phone           String?
  notes           String?
  score           Int           @default(0)
  scoreExplanation Json?
  stage           ProspectStage @default(NEW)
  source          ProspectSource @default(MANUAL)
  lastContactedAt DateTime?
  nextFollowUpAt  DateTime?
  isOptedOut      Boolean       @default(false)
  customFields    Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Company info
  companyName     String
  companyDomain   String?
  companyIndustry String?
  companySize     CompanySize?
  companyRevenue  RevenueRange?
  companyLocation String?

  // Relations
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  icp                ICP                  @relation(fields: [icpId], references: [id], onDelete: Cascade)
  messages           Message[]
  activities         Activity[]
  campaignProspects  CampaignProspect[]
  qualificationLogs  QualificationLog[]

  @@unique([userId, email])
  @@index([userId])
  @@index([icpId])
  @@index([email])
  @@index([stage])
  @@index([score])
}

model QualificationLog {
  id          String   @id @default(cuid())
  prospectId  String
  score       Int
  breakdown   Json     // BANT breakdown scores
  reasoning   Json     // Detailed reasoning
  confidence  Float
  version     String   // AI model version
  createdAt   DateTime @default(now())

  prospect Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  @@index([prospectId])
  @@index([createdAt])
}

// ==================== EMAIL SEQUENCES ====================

model EmailSequence {
  id          String   @id @default(cuid())
  userId      String
  icpId       String
  name        String
  description String?
  isActive    Boolean  @default(true)
  stats       Json?    // Sequence statistics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  icp       ICP                @relation(fields: [icpId], references: [id], onDelete: Cascade)
  steps     EmailSequenceStep[]
  campaigns Campaign[]

  @@index([userId])
  @@index([icpId])
  @@index([isActive])
}

model EmailSequenceStep {
  id         String   @id @default(cuid())
  sequenceId String
  stepNumber Int
  subject    String
  content    String   @db.Text
  delayDays  Int      @default(0)
  conditions Json?    // Conditional logic
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sequence EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([sequenceId, stepNumber])
  @@index([sequenceId])
}

// ==================== CAMPAIGNS ====================

model Campaign {
  id          String         @id @default(cuid())
  userId      String
  sequenceId  String
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)
  startedAt   DateTime?
  completedAt DateTime?
  stats       Json?          // Campaign statistics
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequence  EmailSequence      @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  prospects CampaignProspect[]
  messages  Message[]

  @@index([userId])
  @@index([sequenceId])
  @@index([status])
}

model CampaignProspect {
  id         String   @id @default(cuid())
  campaignId String
  prospectId String
  status     String   @default("pending")
  addedAt    DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  prospect Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  @@unique([campaignId, prospectId])
  @@index([campaignId])
  @@index([prospectId])
}

// ==================== MESSAGING ====================

model Message {
  id              String        @id @default(cuid())
  userId          String
  prospectId      String
  campaignId      String?
  sequenceStepId  String?
  type            MessageType   @default(MANUAL)
  channel         MessageChannel @default(EMAIL)
  subject         String?
  content         String        @db.Text
  status          MessageStatus @default(DRAFT)
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  repliedAt       DateTime?
  bouncedAt       DateTime?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospect     Prospect           @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  campaign     Campaign?          @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  sequenceStep EmailSequenceStep? @relation(fields: [sequenceStepId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([prospectId])
  @@index([campaignId])
  @@index([status])
  @@index([sentAt])
}

// ==================== CRM ACTIVITIES ====================

model Activity {
  id          String       @id @default(cuid())
  userId      String
  prospectId  String
  type        ActivityType
  title       String
  description String?      @db.Text
  scheduledAt DateTime?
  completedAt DateTime?
  reminder    Json?        // Reminder settings
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospect Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([prospectId])
  @@index([type])
  @@index([scheduledAt])
}

// ==================== AI INSIGHTS ====================

model AIInsight {
  id          String          @id @default(cuid())
  userId      String
  type        InsightType
  title       String
  description String          @db.Text
  priority    InsightPriority @default(MEDIUM)
  actionable  Boolean         @default(true)
  metadata    Json?
  isRead      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([isRead])
}

// ==================== REPORTS ====================

model Report {
  id          String     @id @default(cuid())
  userId      String
  type        ReportType
  name        String
  data        Json
  generatedAt DateTime   @default(now())
  expiresAt   DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([generatedAt])
}

// ==================== SUBSCRIPTIONS ====================

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  plan                 SubscriptionPlan   @default(STARTER)
  status               SubscriptionStatus @default(INCOMPLETE)
  stripeCustomerId     String             @unique
  stripeSubscriptionId String?            @unique
  stripePriceId        String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  usage                Json?              // Usage statistics
  limits               Json?              // Plan limits
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
}

model Payment {
  id                 String        @id @default(cuid())
  subscriptionId     String
  stripePaymentId    String        @unique
  stripeInvoiceId    String?       @unique
  amount             Int           // In cents
  currency           String        @default("usd")
  status             PaymentStatus
  failureReason      String?
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  paidAt             DateTime?
  createdAt          DateTime      @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
  @@index([paidAt])
}

// ==================== NOTIFICATIONS ====================

model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String             @db.Text
  priority  NotificationPriority @default(NORMAL)
  data      Json?
  isRead    Boolean            @default(false)
  readAt    DateTime?
  createdAt DateTime           @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// ==================== AUDIT LOGS ====================

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldData    Json?
  newData    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

// ==================== ENUMS ====================

enum UserRole {
  CLIENT
  ADMIN
  TEAM_MEMBER
  TEAM_OWNER
}

enum Language {
  en
  fr
}

enum DataRegion {
  US
  EU
  CA
}

enum SubscriptionPlan {
  STARTER
  PRO
  BUSINESS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum RevenueRange {
  UNDER_1M
  ONE_TO_TEN_M
  TEN_TO_FIFTY_M
  FIFTY_TO_HUNDRED_M
  OVER_100M
}

enum ProspectStage {
  NEW
  CONTACTED
  MEETING
  NEGOTIATION
  WON
  LOST
}

enum ProspectSource {
  CSV_IMPORT
  URL_SCRAPING
  MANUAL
  API
  INTEGRATION
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum MessageType {
  INITIAL
  FOLLOW_UP
  MANUAL
  TEMPLATE
}

enum MessageChannel {
  EMAIL
  LINKEDIN
  SMS
  WHATSAPP
}

enum MessageStatus {
  DRAFT
  SCHEDULED
  SENT
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum ActivityType {
  CALL
  MEETING
  EMAIL
  NOTE
  TASK
  DEMO
  FOLLOW_UP
}

enum InsightType {
  PERFORMANCE
  RECOMMENDATION
  ALERT
  TREND
  PREDICTION
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReportType {
  PERFORMANCE
  PROSPECTS
  SEQUENCES
  CAMPAIGNS
  REVENUE
}

enum NotificationType {
  EMAIL
  PUSH
  IN_APP
  SMS
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
