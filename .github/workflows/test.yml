name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          SUPPRESS_LOGS: true

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ai_sales_agent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          cd apps/api
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/ai_sales_agent_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/ai_sales_agent_test
          JWT_SECRET: test-jwt-secret-key-32-characters-long
          JWT_REFRESH_SECRET: test-refresh-secret-key-32-chars
          ENCRYPTION_KEY: test-encryption-key-32-character
          STRIPE_SECRET_KEY: sk_test_mock
          SENDGRID_API_KEY: SG.test_mock
          OPENAI_API_KEY: sk-test-mock

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ai_sales_agent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/ai_sales_agent_test

      - name: Build applications
        run: npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/ai_sales_agent_test
          JWT_SECRET: test-jwt-secret-key-32-characters-long
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/ai_sales_agent_test
          JWT_SECRET: test-jwt-secret-key-32-characters-long
          JWT_REFRESH_SECRET: test-refresh-secret-key-32-chars
          ENCRYPTION_KEY: test-encryption-key-32-character
          APP_BASE_URL: http://localhost:3000
          CI: true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.unit-tests.result }}" == "success" ] && \
             [ "${{ needs.integration-tests.result }}" == "success" ] && \
             [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ All tests passed successfully!"
            echo "## Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "| E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ Some tests failed"
            echo "## Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
