'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  ChartBarIcon, \n  UserGroupIcon, \n  EnvelopeIcon, \n  TrendingUpIcon,\n  PlusIcon,\n  EyeIcon\n} from '@heroicons/react/24/outline';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { RecentActivity } from '@/components/dashboard/recent-activity';\nimport { ProspectChart } from '@/components/dashboard/prospect-chart';\nimport { PerformanceMetrics } from '@/components/dashboard/performance-metrics';\nimport { AIInsights } from '@/components/dashboard/ai-insights';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useI18n } from '@/hooks/use-i18n';\nimport { formatNumber, formatPercentage } from '@ai-sales-agent/core';\n\ninterface DashboardStats {\n  totalProspects: number;\n  qualifiedProspects: number;\n  emailsSent: number;\n  responseRate: number;\n  pipelineValue: number;\n  activeSequences: number;\n  weeklyGrowth: {\n    prospects: number;\n    emails: number;\n    responses: number;\n  };\n}\n\ninterface QuickAction {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  href: string;\n  color: string;\n}\n\nexport function DashboardOverview() {\n  const { user } = useAuth();\n  const { t } = useI18n();\n  const [selectedTimeRange, setSelectedTimeRange] = useState('7d');\n\n  // Fetch dashboard statistics\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['dashboard-stats', selectedTimeRange],\n    queryFn: async (): Promise<DashboardStats> => {\n      const response = await fetch(`/api/dashboard/stats?timeRange=${selectedTimeRange}`);\n      if (!response.ok) throw new Error('Failed to fetch stats');\n      return response.json();\n    },\n  });\n\n  // Quick actions for getting started\n  const quickActions: QuickAction[] = [\n    {\n      id: 'create-icp',\n      title: t('dashboard.quickActions.createICP'),\n      description: t('dashboard.quickActions.createICPDesc'),\n      icon: UserGroupIcon,\n      href: '/dashboard/icps/new',\n      color: 'bg-blue-500',\n    },\n    {\n      id: 'import-prospects',\n      title: t('dashboard.quickActions.importProspects'),\n      description: t('dashboard.quickActions.importProspectsDesc'),\n      icon: PlusIcon,\n      href: '/dashboard/prospects/import',\n      color: 'bg-green-500',\n    },\n    {\n      id: 'create-sequence',\n      title: t('dashboard.quickActions.createSequence'),\n      description: t('dashboard.quickActions.createSequenceDesc'),\n      icon: EnvelopeIcon,\n      href: '/dashboard/sequences/new',\n      color: 'bg-purple-500',\n    },\n    {\n      id: 'view-reports',\n      title: t('dashboard.quickActions.viewReports'),\n      description: t('dashboard.quickActions.viewReportsDesc'),\n      icon: ChartBarIcon,\n      href: '/dashboard/reports',\n      color: 'bg-orange-500',\n    },\n  ];\n\n  // Stats cards configuration\n  const statsCards = [\n    {\n      title: t('dashboard.stats.totalProspects'),\n      value: stats?.totalProspects || 0,\n      change: stats?.weeklyGrowth.prospects || 0,\n      icon: UserGroupIcon,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n    },\n    {\n      title: t('dashboard.stats.qualifiedProspects'),\n      value: stats?.qualifiedProspects || 0,\n      change: ((stats?.qualifiedProspects || 0) / (stats?.totalProspects || 1)) * 100,\n      icon: TrendingUpIcon,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      isPercentage: true,\n    },\n    {\n      title: t('dashboard.stats.emailsSent'),\n      value: stats?.emailsSent || 0,\n      change: stats?.weeklyGrowth.emails || 0,\n      icon: EnvelopeIcon,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n    },\n    {\n      title: t('dashboard.stats.responseRate'),\n      value: stats?.responseRate || 0,\n      change: stats?.weeklyGrowth.responses || 0,\n      icon: ChartBarIcon,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      isPercentage: true,\n      showAsPercentage: true,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n            {t('dashboard.welcome', { name: user?.firstName || 'User' })}\n          </h1>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n            {t('dashboard.subtitle')}\n          </p>\n        </div>\n        \n        {/* Time Range Selector */}\n        <div className=\"flex space-x-2\">\n          {['7d', '30d', '90d'].map((range) => (\n            <Button\n              key={range}\n              variant={selectedTimeRange === range ? 'primary' : 'outline'}\n              size=\"sm\"\n              onClick={() => setSelectedTimeRange(range)}\n            >\n              {t(`dashboard.timeRange.${range}`)}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statsCards.map((stat, index) => {\n          const Icon = stat.icon;\n          const value = stat.showAsPercentage \n            ? formatPercentage(stat.value / 100)\n            : formatNumber(stat.value);\n          const changeValue = stat.isPercentage \n            ? formatPercentage(stat.change / 100)\n            : stat.change;\n          const isPositive = stat.change >= 0;\n\n          return (\n            <Card key={index} className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                    {stat.title}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                    {statsLoading ? (\n                      <div className=\"h-8 w-16 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                    ) : (\n                      value\n                    )}\n                  </p>\n                  {!statsLoading && (\n                    <div className=\"flex items-center mt-2\">\n                      <Badge \n                        variant={isPositive ? 'default' : 'destructive'}\n                        className=\"text-xs\"\n                      >\n                        {isPositive ? '+' : ''}{changeValue}\n                      </Badge>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\n                        {t('dashboard.vsLastWeek')}\n                      </span>\n                    </div>\n                  )}\n                </div>\n                <div className={`p-3 rounded-lg ${stat.bgColor}`}>\n                  <Icon className={`h-6 w-6 ${stat.color}`} />\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {quickActions.map((action) => {\n          const Icon = action.icon;\n          return (\n            <Card key={action.id} className=\"p-6 hover:shadow-lg transition-shadow cursor-pointer group\">\n              <div className=\"flex items-start space-x-4\">\n                <div className={`p-2 rounded-lg ${action.color} text-white group-hover:scale-110 transition-transform`}>\n                  <Icon className=\"h-5 w-5\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 group-hover:text-primary transition-colors\">\n                    {action.title}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    {action.description}\n                  </p>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Charts and Performance */}\n        <div className=\"lg:col-span-2 space-y-8\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                {t('dashboard.charts.prospectTrends')}\n              </h2>\n              <Button variant=\"outline\" size=\"sm\">\n                <EyeIcon className=\"h-4 w-4 mr-2\" />\n                {t('common.viewDetails')}\n              </Button>\n            </div>\n            <ProspectChart timeRange={selectedTimeRange} />\n          </Card>\n\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6\">\n              {t('dashboard.performance.title')}\n            </h2>\n            <PerformanceMetrics timeRange={selectedTimeRange} />\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-8\">\n          {/* AI Insights */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6\">\n              {t('dashboard.insights.title')}\n            </h2>\n            <AIInsights />\n          </Card>\n\n          {/* Recent Activity */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6\">\n              {t('dashboard.activity.title')}\n            </h2>\n            <RecentActivity />\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n