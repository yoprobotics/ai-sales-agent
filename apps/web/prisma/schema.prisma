// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  firstName         String
  lastName          String
  hashedPassword    String
  role              String    @default("CLIENT")
  plan              String    @default("STARTER") // STARTER, PRO, BUSINESS
  companyName       String?
  language          String    @default("en")
  dataRegion        String    @default("EU")
  timezone          String    @default("UTC")
  isEmailVerified   Boolean   @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  icps              ICP[]
  prospects         Prospect[]
  emailSequences    EmailSequence[]
  emailTemplates    EmailTemplate[]
  campaigns         Campaign[]
  activities        Activity[]
  insights          AIInsight[]
  sessions          Session[]
  subscription      Subscription?
}

// Session model for auth
model Session {
  id            String   @id @default(uuid())
  userId        String
  token         String   @unique
  refreshToken  String   @unique
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Subscription model - UPDATED
model Subscription {
  id                   String    @id @default(uuid())
  userId               String    @unique
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?   // Added for webhook
  plan                 String    @default("STARTER")
  status               String    @default("INACTIVE") // INACTIVE, TRIALING, ACTIVE, PAST_DUE, CANCELED, UNPAID, INCOMPLETE
  trialEndsAt          DateTime? // Added for trial support
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  canceledAt           DateTime? // Added for cancellation tracking
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage                SubscriptionUsage?
  payments             Payment[]
}

// NEW: Subscription Usage model
model SubscriptionUsage {
  id                String    @id @default(uuid())
  subscriptionId    String    @unique
  prospectsUsed     Int       @default(0)
  prospectsLimit    Int       @default(200)
  icpsUsed          Int       @default(0)
  icpsLimit         Int       @default(1)
  sequencesUsed     Int       @default(0)
  sequencesLimit    Int       @default(1)
  messagesUsed      Int       @default(0)
  messagesLimit     Int       @default(1000)
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  subscription      Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

// NEW: Payment model
model Payment {
  id                   String    @id @default(uuid())
  subscriptionId       String
  stripePaymentId      String    @unique
  stripeInvoiceId      String?   @unique
  amount               Int       // in cents
  currency             String    @default("USD")
  status               String    // SUCCEEDED, FAILED, PENDING
  failureReason        String?
  billingPeriodStart   DateTime?
  billingPeriodEnd     DateTime?
  paidAt               DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  subscription         Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId, status])
}

// ICP (Ideal Customer Profile)
model ICP {
  id            String    @id @default(uuid())
  userId        String
  name          String
  description   String?
  criteria      Json
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospects     Prospect[]
  sequences     EmailSequence[]
}

// Prospect model
model Prospect {
  id              String    @id @default(uuid())
  userId          String
  icpId           String
  email           String
  firstName       String?
  lastName        String?
  jobTitle        String?
  company         Json
  linkedinUrl     String?
  websiteUrl      String?
  phone           String?
  notes           String?
  score           Int       @default(0)
  scoreExplanation Json?
  stage           String    @default("new")
  source          String    @default("manual")
  lastContactedAt DateTime?
  nextFollowUpAt  DateTime?
  isOptedOut      Boolean   @default(false)
  customFields    Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  icp             ICP       @relation(fields: [icpId], references: [id], onDelete: Cascade)
  messages        Message[]
  activities      Activity[]
  
  @@index([userId, email])
}

// Email Template model
model EmailTemplate {
  id            String    @id @default(uuid())
  userId        String
  name          String
  subject       String
  content       String    @db.Text
  type          String    @default("CUSTOM") // CUSTOM, INTRO, FOLLOW_UP, etc.
  language      String    @default("en")
  isActive      Boolean   @default(true)
  usageCount    Int       @default(0)
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, type])
}

// Email Sequence
model EmailSequence {
  id            String    @id @default(uuid())
  userId        String
  icpId         String
  name          String
  description   String?
  isActive      Boolean   @default(true)
  stats         Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  icp           ICP       @relation(fields: [icpId], references: [id], onDelete: Cascade)
  steps         EmailSequenceStep[]
  campaigns     Campaign[]
}

// Email Sequence Step
model EmailSequenceStep {
  id            String    @id @default(uuid())
  sequenceId    String
  stepNumber    Int
  subject       String
  content       String    @db.Text
  delayDays     Int       @default(0)
  conditions    Json?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sequence      EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  messages      Message[]
}

// Campaign
model Campaign {
  id            String    @id @default(uuid())
  userId        String
  name          String
  description   String?
  sequenceId    String
  status        String    @default("draft")
  startedAt     DateTime?
  completedAt   DateTime?
  stats         Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequence      EmailSequence @relation(fields: [sequenceId], references: [id])
  messages      Message[]
}

// Message
model Message {
  id              String    @id @default(uuid())
  prospectId      String
  campaignId      String?
  sequenceStepId  String?
  type            String    @default("manual")
  channel         String    @default("email")
  subject         String?
  content         String    @db.Text
  status          String    @default("draft")
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  repliedAt       DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  prospect        Prospect  @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  campaign        Campaign? @relation(fields: [campaignId], references: [id])
  sequenceStep    EmailSequenceStep? @relation(fields: [sequenceStepId], references: [id])
  
  @@index([prospectId, status])
}

// Activity
model Activity {
  id            String    @id @default(uuid())
  userId        String
  prospectId    String
  type          String
  title         String
  description   String?
  scheduledAt   DateTime?
  completedAt   DateTime?
  reminder      Json?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospect      Prospect  @relation(fields: [prospectId], references: [id], onDelete: Cascade)
}

// AI Insight
model AIInsight {
  id            String    @id @default(uuid())
  userId        String
  type          String
  title         String
  description   String    @db.Text
  priority      String    @default("medium")
  actionable    Boolean   @default(false)
  metadata      Json?
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}